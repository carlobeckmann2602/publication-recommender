version: "3.9"
services:
  nest:
    image: node:18-alpine3.17
    volumes:
      - ./backend:/usr/src/app
    working_dir: /usr/src/app
    ports:
      - "${BACKEND_HOST_PORT}:${BACKEND_PORT}"
    healthcheck:
      test: wget --spider http://localhost:${BACKEND_PORT}
      interval: 30s
      retries: 50
      start_period: 10s
      timeout: 10s
    depends_on:
      - postgres
      - rabbitmq
      - ai_backend
    stdin_open: true
    command:
      - /bin/sh
      - -c
      - |
        npm install
        npm run migration:run
        npm run start:dev
    tty: true
    networks:
      - pr_network
    environment:
      - APP_ENV=${APP_ENV}
      - BACKEND_PORT=${BACKEND_PORT}
      - DB_HOST=${BACKEND_DB_HOST}
      - DB_USERNAME=${BACKEND_DB_USERNAME}
      - DB_PASSWORD=${BACKEND_DB_PASSWORD}
      - DB_DATABASE=${BACKEND_DB_DATABASE}
      - DB_PORT=${BACKEND_DB_PORT}
      - JWT_SECRET=${BACKEND_JWT_SECRET}
      - JWT_ACCESS_TOKEN_TTL=${BACKEND_JWT_ACCESS_TOKEN_TTL}
      - JWT_REFRESH_TOKEN_TTL=${BACKEND_JWT_REFRESH_TOKEN_TTL}
      - RABBITMQ_HOST=${RABBITMQ_HOST}
      - RABBITMQ_PORT=${RABBITMQ_PORT}
      - RABBITMQ_DATA_QUEUE=${RABBITMQ_DATA_QUEUE}

  ai_backend:
    build:
      context: ./ai_backend
      dockerfile: Dockerfile
    volumes:
      - ./ai_backend/:/code/
    ports:
      - "${AI_BACKEND_HOST_PORT}:${AI_BACKEND_PORT}"
    stdin_open: true
    depends_on:
      - rabbitmq
    tty: true
    networks:
      - pr_network
    environment:
      - PORT=${AI_BACKEND_PORT}

  postgres:
    image: postgres:16.0-alpine3.18
    environment:
      - POSTGRES_USER=${BACKEND_DB_USERNAME}
      - POSTGRES_PASSWORD=${BACKEND_DB_PASSWORD}
      - POSTGRES_DB=${BACKEND_DB_DATABASE}
    volumes:
      - backend_database:/var/lib/postgresql/data
    networks:
      - pr_network
    ports:
      - "${BACKEND_DB_HOST_PORT}:${BACKEND_DB_PORT}"

  next:
    image: node:18-alpine3.17
    volumes:
      - ./frontend:/usr/src/app
    working_dir: /usr/src/app
    ports:
      - "${FRONTEND_HOST_PORT}:${FRONTEND_PORT}"
    depends_on:
      nest:
        condition: service_healthy
    stdin_open: true
    command:
      - /bin/sh
      - -c
      - |
        npm install
        npm run codegen
        npm run dev
    tty: true
    networks:
      - pr_network
    environment:
      - BACKEND_GRAPHQL_ENDPOINT=${FRONTEND_BACKEND_GRAPHQL_ENDPOINT}
      - NEXTAUTH_SECRET=${FRONTEND_NEXTAUTH_SECRET}
      - NEXTAUTH_URL=${FRONTEND_NEXTAUTH_URL}
      - GOOGLE_CLIENT_ID=${FRONTEND_GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${FRONTEND_GOOGLE_CLIENT_SECRET}

  adminer:
    image: adminer
    restart: always
    networks:
      - pr_network
    ports:
      - "${ADMINER_HOST_PORT}:${ADMINER_PORT}"

  seeders:
    image: node:18-alpine3.17
    working_dir: /usr/src/app
    profiles:
      - seeders
    volumes:
      - ./backend:/usr/src/app
    depends_on:
      nest:
        condition: service_healthy
    command:
      - /bin/sh
      - -c
      - |
        npm run seed:run
    networks:
      - pr_network
    environment:
      - APP_ENV=${APP_ENV}
      - DB_HOST=${BACKEND_DB_HOST}
      - DB_USERNAME=${BACKEND_DB_USERNAME}
      - DB_PASSWORD=${BACKEND_DB_PASSWORD}
      - DB_DATABASE=${BACKEND_DB_DATABASE}
      - DB_PORT=${BACKEND_DB_PORT}

  rabbitmq:
    image: rabbitmq:3.12.9-management-alpine
    volumes:
      - rabbit_data:/var/lib/rabbitmq
    networks:
      - pr_network
    ports:
      - "${RABBITMQ_HOST_PORT}:${RABBITMQ_PORT}"
      - "${RABBITMQ_MANAGEMENT_PORT}:${RABBITMQ_MANAGEMENT_PORT}"

volumes:
  backend_database:
  rabbit_data:

networks:
  pr_network:
