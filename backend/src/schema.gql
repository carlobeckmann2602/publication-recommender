# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type User {
  id: String!
  email: String!
  name: String!
}

type JwtDto {
  accessToken: String!
  refreshToken: String!
  expiresIn: Int!
}

type LoggedIn {
  jwt: JwtDto!
  user: User!
}

type EmbeddingResponseDto {
  id: String!
  text: String!
  vector: [Float!]!
}

type PublicationResponseDto {
  id: String!
  title: String!
  doi: [String!]!
  exId: String!
  source: PublicationSource!
  url: String
  authors: [String!]
  publicationDate: DateTime
  isFavorite: Boolean!
  abstract: String
  coordinate: [Float!]
  embeddings: [EmbeddingResponseDto!]!
}

enum PublicationSource {
  ARXIV
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type MaximumAmountOfSentencesForPublicationResponseDto {
  amount: Int!
}

type NearestNeighborsResponseDto {
  publication: PublicationResponseDto!
  distance: Float!
  embeddingId: String!
}

type PublicationsSearchResponseDto {
  searchTerm: String!
  searchCoordinate: [Float!]
  matchingPublications: [PublicationResponseDto!]!
  similarPublications: [PublicationResponseDto!]!
}

type PublicationsSearchByIdResponseDto {
  searchCoordinate: [Float!]
  similarPublications: [PublicationResponseDto!]!
}

type PublicationGroupResponseDto {
  id: String!
  name: String!
  color: String!
  publications: [PublicationResponseDto!]!
}

type SuccessResponseDto {
  success: Boolean!
}

type RecommendationResponseDto {
  id: String
  publications: [PublicationResponseDto!]!
  createdAt: DateTime!
}

type Query {
  publications(publicationsSearchDto: PublicationsSearchDto!): PublicationsSearchResponseDto!
  similarPublicationsForPublicationWithId(similarPublicationsForPublicationWithIdDto: SimilarPublicationsForPublicationWithIdDto!): PublicationsSearchByIdResponseDto!
  publicationCount(source: PublicationSource): Int!
  publication(id: String!): PublicationResponseDto!
  oldest(source: PublicationSource!): PublicationResponseDto!
  newest(source: PublicationSource!): PublicationResponseDto!
  providePublicationChunk(providePublicationChunk: PublicationChunkRequestDto!): [PublicationResponseDto!]!
  searchPublicationBySourceAndSourceId(publicationSourceAndSourceId: PublicationSourceWithSourceIdDto!): PublicationResponseDto
  getNearestNeighbors(nearestNeighborRequestDto: NearestNeighborRequestDto!): [NearestNeighborsResponseDto!]!
  maximumAmountOfSentencesForPublication: MaximumAmountOfSentencesForPublicationResponseDto!
  favorites: [PublicationResponseDto!]!
  recommendations: [RecommendationResponseDto!]!
  publicationGroups: [PublicationGroupResponseDto!]!
  publicationGroup(id: String!): PublicationGroupResponseDto!
  profile: User!
}

input PublicationsSearchDto {
  searchInput: String!
  sortStrategy: SortStrategy! = RELEVANCE
  page: Int! = 0
  amountPerPage: Int! = 5
  filters: SearchFilters
}

enum SortStrategy {
  RELEVANCE
  NEWEST
  OLDEST
  A_TO_Z
  Z_TO_A
}

input SearchFilters {
  title: String
  author: String
  years: [String!]
  doi: String
}

input SimilarPublicationsForPublicationWithIdDto {
  id: String!
  sortStrategy: SortStrategy! = RELEVANCE
  page: Int! = 0
  amountPerPage: Int! = 5
  filters: SearchFilters
}

input PublicationChunkRequestDto {
  chunk: Int!
  chunkSize: Int = 100
}

input PublicationSourceWithSourceIdDto {
  exId: String!
  source: PublicationSource!
}

input NearestNeighborRequestDto {
  vector: [Float!]!
  amount: Int!
}

type Mutation {
  register(data: RegisterDto!): LoggedIn!
  login(data: LoginDto!): LoggedIn!
  refreshToken(token: String!): JwtDto!
  savePublication(createPublication: CreatePublicationDto!): PublicationResponseDto!
  savePublicationsCoordinates(savePublicationsCoordinatesDto: SavePublicationsCoordiantesDto!): [PublicationResponseDto!]!
  markAsFavorite(id: String!): Boolean!
  unmarkAsFavorite(id: String!): Boolean!
  createNewRecommendation(createNewRecommendationInput: RecommendationCreateDto): RecommendationResponseDto!
  createPublicationGroup(data: PublicationGroupCreateDto!): PublicationGroupResponseDto!
  updatePublicationGroup(data: PublicationGroupDto!): SuccessResponseDto!
  deletePublicationGroup(id: String!): SuccessResponseDto!
  addToPublicationGroup(publicationgroup_id: String!, publication_ids: [String!]!): SuccessResponseDto!
  removeFromPublicationGroup(publicationgroup_id: String!, publication_id: String!): SuccessResponseDto!
  updateProfile(data: UpdateUserDto!): User!
  deleteProfile: Boolean!
}

input RegisterDto {
  email: String!
  password: String!
  name: String!
}

input LoginDto {
  email: String!
  password: String!
}

input CreatePublicationDto {
  title: String!
  exId: String!
  source: PublicationSource!
  doi: [String!]
  url: String
  publisher: String
  abstract: String
  authorsCreateDtos: [AuthorCreateDto!]
  date: DateTime
  embeddingsCreateDtos: [EmbeddingCreateDto!]!
}

input AuthorCreateDto {
  name: String!
}

input EmbeddingCreateDto {
  text: String!
  vector: [Float!]!
}

input SavePublicationsCoordiantesDto {
  coordinates: [CoordinatesDto!]!
}

input CoordinatesDto {
  id: String!
  coordinate: [Float!]!
}

input RecommendationCreateDto {
  group: [String!]!
  exlude: [String!]! = []
  amount: Int! = 10
}

input PublicationGroupCreateDto {
  name: String!
  color: String!
}

input PublicationGroupDto {
  id: String!
  name: String
  color: String
}

input UpdateUserDto {
  email: String
  password: String
  oldPassword: String
  name: String
}